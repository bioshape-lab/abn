[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.poetry]
name = "neurometry"
version = "0.0.1"
authors = ["GI Authors <facosta@ucsb.edu>"]
readme = "README.md"
license = "LICENSE.txt"
description = "Geometric Intelligence"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
]

requires-python = ">= 3.9"
dependencies=[
    "adjustText",
    "cython",
    "fastparquet",
    "gdown",
    "jupyterlab",
    "kneed",
    "pip",
    "pandas",
    "plotly",
    "pycortex",
    "matplotlib",
    "nibabel",
    "numpy",
    "scikit-image",
    "scikit-learn",
    "seaborn",
    "torch",
    "torchmetrics",
    "torchinfo",
    "opencv-python",
    "scikit-dimension",
    "umap-learn",
    "ripser",
    "absl-py",
    "ml-collections",
    "tensowflow-cpu",
    "clu",
    "labml-helpers",
    "ray",
    "pyarrow",
    "mat73",
    "hyperopt",
    "wandb",
    "jupyter-black",
    "giotto-ph @ git+https://github.com/alibayeh/giotto-ph.git",
    "pyflagser @ git+https://github.com/alibayeh/pyflagser.git",
    "giotto-tda @ git+https://github.com/alibayeh/giotto-tda.git",
    "geomstats @ git+https://github.com/geomstats/geomstats.git",
    "torchlens @ git+https://github.com/johnmarktaylor91/torchlens.git",
    "netrep @ git+https://github.com/ahwillia/netrep.git"
]

[tool.poetry.dependencies]
python = "^3.9"
adjustText = "*"
cython = "*"
fastparquet = "*"
gdown = "*"
jupyterlab = "*"
kneed = "*"
pip = "*"
pandas = "*"
plotly = "*"
pycortex = "*"
matplotlib = "*"
nibabel = "*"
numpy = "*"
scikit-image = "*"
scikit-learn = "*"
seaborn = "*"
torch = "*"
torchmetrics = "*"
torchinfo = "*"
opencv-python = "*"
scikit-dimension = "*"
umap-learn = "*"
ripser = "*"
absl-py = "*"
ml-collections = "*"
clu = "*"
labml-helpers = "*"
giotto-ph = {git = "https://github.com/alibayeh/giotto-ph.git"}
pyflagser = {git = "https://github.com/alibayeh/pyflagser.git"}
giotto-tda = {git = "https://github.com/alibayeh/giotto-tda.git"}
geomstats = {git = "https://github.com/geomstats/geomstats.git"}
torchlens = {git = "https://github.com/johnmarktaylor91/torchlens.git"}
netrep = {git = "https://github.com/ahwillia/netrep.git"}
jupyter = "*"
nbsphinx = "*"
nbsphinx_link = "*"
numpydoc = "*"
sphinx = "*"
sphinx_gallery = "*"
pydata-sphinx-theme = "*"
pre-commit = "*"
ruff = "*"
pytest = "*"
pytest-cov = "*"
coverage = "*"
mypy = "^1.6.0"
pandas-stubs = "*"
types-requests = "*"
wandb = "*"
mtalg = "*"
ray = { version = "*", extras = ["tune"] }
mat73 = "*"
hyperopt = "0.2.5"

[tool.poetry.extras]
gpu = ["cupy-cuda11x"]

[project.urls]
homepage="https://github.com/geometric-intelligence/neurometry"
repository="https://github.com/geometric-intelligence/neurometry"

[tool.ruff]
target-version = "py311"
extend-exclude = ["*.ipynb"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F", # pyflakes errors
    "E", # code style
    "W", # warnings
    "I", # import order
    "UP", # pyupgrade rules
    "B", # bugbear rules
    "PIE", # pie rules
    "Q", # quote rules
    "RET", # return rules
    "SIM", # code simplifications
    "NPY", # numpy rules
    "PERF", # performance rules
    "RUF", # miscellaneous rules
]
ignore = [
    "E501",    # line too long
    "PERF203", # allow try-except within loops
    "RUF012",  # force typing
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F403"]

[tool.setuptools.dynamic]
version = {attr = "neurometry.__version__"}

[tool.setuptools.packages.find]
include = [
    "neurometry",
    "neurometry.*"
]

[tool.mypy]
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
disable_error_code = ["import-untyped"]
plugins = "numpy.typing.mypy_plugin"

[tool.pytest.ini_options]
addopts = "--capture=no"

[tool.coverage.report]
exclude_lines = ["pragma: not covered", "@overload"]

[tool.numpydoc_validation]
checks = [
    "all",
    "GL01",
    "ES01",
    "EX01",
    "SA01"
]
exclude = [
    '\.__init__$',
]

[tool.pip]
extra-index-url = "https://pypi.org/simple"